# should we build static libs?
if (OGRE_STATIC)
  set(OGRE_LIB_TYPE STATIC)
else ()
  set(OGRE_LIB_TYPE SHARED)
endif ()

# add compile options necessary for threading
if (OGRE_CONFIG_THREADS AND UNIX)
  add_definitions(-pthread)
endif()

# determine config values depending on build options and set preprocessor defines accordingly
set(OGRE_SET_DOUBLE 0)
set(OGRE_SET_ALLOCATOR ${OGRE_CONFIG_ALLOCATOR})
set(OGRE_SET_CONTAINERS_USE_ALLOCATOR 0)
set(OGRE_SET_STRING_USE_ALLOCATOR 0)
set(OGRE_SET_MEMTRACK_DEBUG 0)
set(OGRE_SET_MEMTRACK_RELEASE 0)
set(OGRE_SET_THREADS ${OGRE_CONFIG_THREADS})
set(OGRE_SET_DISABLE_FREEIMAGE 0)
set(OGRE_SET_DISABLE_DDS 0)
set(OGRE_SET_NEW_COMPILERS 0)
set(OGRE_STATIC_LIB 0)
if (OGRE_CONFIG_DOUBLE)
  set(OGRE_SET_DOUBLE 1)
endif()
if (OGRE_CONFIG_CONTAINERS_USE_ALLOCATOR)
  set(OGRE_SET_CONTAINERS_USE_ALLOCATOR 1)
endif ()
if (OGRE_CONFIG_STRING_USE_ALLOCATOR)
  set(OGRE_SET_STRING_USE_ALLOCATOR 1)
endif ()
if (OGRE_CONFIG_MEMTRACK_DEBUG)
  set(OGRE_SET_MEMTRACK_DEBUG 1)
endif()
if (OGRE_CONFIG_MEMTRACK_RELEASE)
  set(OGRE_SET_MEMTRACK_RELEASE 1)
endif()
if (OGRE_CONFIG_DISABLE_FREEIMAGE)
  set(OGRE_SET_DISABLE_FREEIMAGE 1)
endif()
if (OGRE_CONFIG_DISABLE_DDS)
  set(OGRE_SET_DISABLE_DDS 1)
endif()
if(OGRE_CONFIG_NEW_COMPILERS)
  set(OGRE_SET_NEW_COMPILERS 1)
endif()
if (OGRE_STATIC)
  set(OGRE_STATIC_LIB 1)
endif()
if (OGRE_SET_THREADS GREATER 2 OR OGRE_SET_THREADS LESS 0)
  set(OGRE_SET_THREADS 1)
endif ()
add_definitions(-DOGRE_DOUBLE_PRECISION=${OGRE_SET_DOUBLE})
add_definitions(-DOGRE_MEMORY_ALLOCATOR=${OGRE_SET_ALLOCATOR})
add_definitions(-DOGRE_CONTAINERS_USE_CUSTOM_MEMORY_ALLOCATOR=${OGRE_SET_CONTAINERS_USE_ALLOCATOR})
add_definitions(-DOGRE_STRING_USE_CUSTOM_MEMORY_ALLOCATOR=${OGRE_SET_STRING_USE_ALLOCATOR})
add_definitions(-DOGRE_MEMORY_TRACKER_DEBUG_MODE=${OGRE_SET_MEMTRACK_DEBUG})
add_definitions(-DOGRE_MEMORY_TRACKER_RELEASE_MODE=${OGRE_SET_MEMTRACK_RELEASE})
add_definitions(-DOGRE_THREAD_SUPPORT=${OGRE_SET_THREADS})
add_definitions(-DOGRE_NO_FREEIMAGE=${OGRE_SET_DISABLE_FREEIMAGE})
add_definitions(-DOGRE_NO_DDS_CODEC=${OGRE_SET_DISABLE_DDS})
add_definitions(-DOGRE_USE_NEW_COMPILERS=${OGRE_SET_NEW_COMPILERS})

# Read contents of the OgreConfig.h file
file(READ "${OGRE_SOURCE_DIR}/OgreMain/include/OgreConfig.h" OGRE_CONFIG_H)
# modify OgreConfig.h contents
replace_preprocessor_entry(OGRE_CONFIG_H OGRE_DOUBLE_PRECISION ${OGRE_SET_DOUBLE})
replace_preprocessor_entry(OGRE_CONFIG_H OGRE_MEMORY_ALLOCATOR ${OGRE_SET_ALLOCATOR})
replace_preprocessor_entry(OGRE_CONFIG_H OGRE_CONTAINERS_USE_CUSTOM_MEMORY_ALLOCATOR ${OGRE_SET_CONTAINERS_USE_ALLOCATOR})
replace_preprocessor_entry(OGRE_CONFIG_H OGRE_STRING_USE_CUSTOM_MEMORY_ALLOCATOR ${OGRE_SET_STRING_USE_ALLOCATOR})
replace_preprocessor_entry(OGRE_CONFIG_H OGRE_MEMORY_TRACKER_DEBUG_MODE ${OGRE_SET_MEMTRACK_DEBUG})
replace_preprocessor_entry(OGRE_CONFIG_H OGRE_MEMORY_TRACKER_RELEASE_MODE ${OGRE_SET_MEMTRACK_RELEASE})
replace_preprocessor_entry(OGRE_CONFIG_H OGRE_THREAD_SUPPORT ${OGRE_SET_THREADS})
replace_preprocessor_entry(OGRE_CONFIG_H OGRE_NO_FREEIMAGE ${OGRE_SET_DISABLE_FREEIMAGE})
replace_preprocessor_entry(OGRE_CONFIG_H OGRE_NO_DDS ${OGRE_SET_DISABLE_DDS})
replace_preprocessor_entry(OGRE_CONFIG_H OGRE_USE_NEW_COMPILERS ${OGRE_SET_NEW_COMPILERS})
set_preprocessor_entry(OGRE_CONFIG_H OGRE_STATIC_LIB OGRE_STATIC_LIB)

# save new OgreConfig.h to build dir
file(WRITE ${OGRE_BINARY_DIR}/include/OgreConfig.h ${OGRE_CONFIG_H})
install(FILES ${OGRE_BINARY_DIR}/include/OgreConfig.h DESTINATION include/OGRE)

# Configure the OgreVersion.h header
#configure_file(${OGRE_TEMPLATES_DIR}/OgreVersion.h.in ${OGRE_BINARY_DIR}/include/OgreVersion.h)
#install(FILES ${OGRE_BINARY_DIR}/include/OgreVersion.h DESTINATION include/OGRE)

