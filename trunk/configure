#!/bin/bash

# if you add a config option, please update the help text accordingly

##
# Parse the command line
##
DEBUG=n
PROFILE=n
for x in $@; do
    case x$x in
        (x--enable-debug)
            DEBUG="y";;
        (x--enable-profiler)
            PROFILE="y";;
        (x--with-stlport)
            USE_STLPORT="y";;
        (x--help)
            cat <<HELP_TEXT
ogre configuration script
Usage: configure [options]
Options:
    --enable-debug      Compile with debugging symbols, and output debug text
    --enable-profiler   Compile with profiling support
    --with-stlport      Use STLport instead of the system STL
HELP_TEXT
            exit 0
            ;;
    esac;
done;

##
# Setup our initial flags
##
echo -n "Selecting C compiler..."
if [ -n "$CC" ]; then
    CC="$CC";
else
    CC="gcc";
fi;
echo -e "\t\t$CC"
echo -n "Selecting C++ compiler..."
if [ -n "$CXX" ]; then
    CXX="$CXX";
else
    CXX="g++";
fi;
echo -e "\t$CXX"
CFLAGS="$CFLAGS -fPIC -Wall -DEXT_HASH -DGCC_3_1"
LDFLAGS=""
DEFINES="$DEFINES -DOGRE_LINUX"

##
# Debug
##
echo -n "Checking for debug support..."
if test x$DEBUG = "xy"; then
    echo -e "\tyes"
    CFLAGS="$CFLAGS -g"
    DEFINES="$DEFINES -DDEBUG=1";
else
    echo -e "\tno"
fi

##
# Profile
##
echo -n "Checking for profiler support..."
if test x$PROFILE = "xy"; then
    echo "yes"
    CFLAGS="$CFLAGS -pg"
    if test x$CC=xgcc; then
        if test x-`gcc --version | grep -E "(2\.95|3)\."` != "x-"; then
            CFLAGS="$CFLAGS -fprofile-arcs"
        fi
    fi
else
    echo "no"
fi

##
# System functions
##
for func in snprintf vsnprintf; do
    echo -n "Checking for $func..."
    cat << EOF > test_func.c
#include <string.h>

int main(void) { $func(); return 0; }
EOF
    if eval "$CC test_func.c -o test_func > /dev/null 2>&1"; then
        echo -e "\tyes"
        DEFINES="$DEFINES -DHAVE_`echo $func | tr a-z A-Z`";
    else
        echo -e "\tno"
    fi
    rm -f test_func.c test_func
done

##
# STLport
##
echo -n "Checking which STL to use..."
if test x$USE_STLPORT = "xy"; then
    echo -e "\tSTLport"
    STLDIR=""
    while test -z $STLDIR; do
        printf "Path to main STLport directory: "
        read STLPORTDIR
        if test -d $STLPORTDIR/lib && test -d $STLPORTDIR/stlport; then
            STLDIR=$STLPORTDIR;
            INCDIRS="$INCDIRS -I\$(STLDIR)/stlport"
            LDFLAGS="$LDFLAGS -L\$(STLDIR)/lib"
        else
            echo "*** Invalid directory:  The directory must contain the lib and stlport"
            echo "                        subdirectories."
        fi;
    done;
else
    echo -e "\tsystem"
fi

TOPDIR=`pwd`

echo -n "Saving Settings..."
cat << EOF > platform-settings
CC=$CC
CXX=$CXX
CFLAGS=$CFLAGS \$(INCDIRS)
TOPDIR=$TOPDIR
INCDIRS=$INCDIRS -I. -I../include -I\$(TOPDIR)/OgreMain/include
DEFINES=$DEFINES
LDFLAGS=$LDFLAGS
LIBS=-ljpeg -lpng -ldl
STLDIR=$STLDIR
COPY=cp
EOF
chmod 0600 platform-settings
echo -e "\t\tReady to build"
echo
echo "Please type 'make' to build ogre now"
echo
