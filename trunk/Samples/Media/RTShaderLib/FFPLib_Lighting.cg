/*
-----------------------------------------------------------------------------
This source file is part of OGRE
(Object-oriented Graphics Rendering Engine)
For the latest info, see http://www.ogre3d.org

Copyright (c) 2000-2006 Torus Knot Software Ltd
Also see acknowledgements in Readme.html

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt.

You may alternatively use this source under the terms of a specific version of
the OGRE Unrestricted License provided you have obtained such a license from
Torus Knot Software Ltd.
-----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
// Program Name: FFPLib_Lighting
// Program Desc: Lighting functions of the FFP.
// Program Type: Vertex shader
// Language: CG
// Notes: Implements core functions for FFPLighting class.
// based on lighting engine. 
// See http://msdn.microsoft.com/en-us/library/bb147178(VS.85).aspx
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
void FFP_Light_Directional_Diffuse(in float4x4 mWorldViewIT, 
				   in float3 vNormal,
				   in float3 vNegLightDirView,
				   in float3 vDiffuseColour, 
				   in float3 vBaseColour, 
				   out float3 vOut)
{
	float3 vNormalView = normalize(mul((float3x3)mWorldViewIT, vNormal));
	float nDotL = dot(vNormalView, vNegLightDirView);
	
	vOut = vBaseColour + vDiffuseColour * saturate(nDotL);
}


//-----------------------------------------------------------------------------
void FFP_Light_Directional_DiffuseSpecular(in float4x4 mWorldView, 
					in float4 vPos,
					in float4x4 mWorldViewIT, 
					in float3 vNormal,
					in float3 vNegLightDirView,
					in float3 vDiffuseColour, 
					in float3 vSpecularColour, 
					in float fSpecularPower, 
					in float3 vBaseDiffuseColour,
					in float3 vBaseSpecularColour,					
					out float3 vOutDiffuse,
					out float3 vOutSpecular)
{
	vOutDiffuse  = vBaseDiffuseColour;
	vOutSpecular = vBaseSpecularColour;
	
	float3 vNormalView = normalize(mul((float3x3)mWorldViewIT, vNormal));		
	float nDotL		   = dot(vNormalView, vNegLightDirView);			
	float3 vView       = -normalize(mul(mWorldView, vPos).xyz);
	float3 vHalfWay    = normalize(vView + vNegLightDirView);
	float nDotH        = dot(vNormalView, vHalfWay);
	
	if (nDotL > 0)
	{
		vOutDiffuse  += vDiffuseColour * nDotL;		
		vOutSpecular += vSpecularColour * pow(saturate(nDotH), fSpecularPower);						
	}
}


//-----------------------------------------------------------------------------
void FFP_Light_Point_Diffuse(in float4x4 mWorldView, 
					in float4 vPos,
					in float4x4 mWorldViewIT, 
				    in float3 vNormal,
				    in float3 vLightPosView,
				    in float4 vAttParams,
				    in float3 vDiffuseColour, 
				    in float3 vBaseColour, 
				    out float3 vOut)
{
	vOut = vBaseColour;		

	float3 vViewPos    = mul(mWorldView, vPos).xyz;
	float3 vLightView  = vLightPosView - vViewPos;
	float fLightD      = length(vLightView);
	float3 vNormalView = normalize(mul((float3x3)mWorldViewIT, vNormal));
	float nDotL        = dot(vNormalView, normalize(vLightView));
	
	if (nDotL > 0 && fLightD <= vAttParams.x)
	{
		float fAtten	   = 1 / (vAttParams.y + vAttParams.z*fLightD + vAttParams.w*fLightD*fLightD);
			
		vOut += vDiffuseColour * nDotL * fAtten;
	}		
}

//-----------------------------------------------------------------------------
void FFP_Light_Point_DiffuseSpecular(in float4x4 mWorldView, 
					in float4 vPos,
					in float4x4 mWorldViewIT, 
				    in float3 vNormal,
				    in float3 vLightPosView,
				    in float4 vAttParams,
				    in float3 vDiffuseColour, 
				    in float3 vSpecularColour, 
					in float fSpecularPower, 
				    in float3 vBaseDiffuseColour,
					in float3 vBaseSpecularColour,					
					out float3 vOutDiffuse,
					out float3 vOutSpecular)
{
	vOutDiffuse  = vBaseDiffuseColour;
	vOutSpecular = vBaseSpecularColour;

	float3 vViewPos    = mul(mWorldView, vPos).xyz;
	float3 vLightView  = vLightPosView - vViewPos;
	float fLightD      = length(vLightView);
	
	vLightView		   = normalize(vLightView);	
	float3 vNormalView = normalize(mul((float3x3)mWorldViewIT, vNormal));
	float nDotL        = dot(vNormalView, vLightView);	
		
	if (nDotL > 0 && fLightD <= vAttParams.x)
	{					
		float3 vView       = -normalize(vViewPos);			
		float3 vHalfWay    = normalize(vView + vLightView);		
		float nDotH        = dot(vNormalView, vHalfWay);
		float fAtten	   = 1 / (vAttParams.y + vAttParams.z*fLightD + vAttParams.w*fLightD*fLightD);					
		
		vOutDiffuse  += vDiffuseColour * nDotL * fAtten;
		vOutSpecular += vSpecularColour * pow(saturate(nDotH), fSpecularPower) * fAtten;					
	}		
}

//-----------------------------------------------------------------------------
void FFP_Light_Spot_Diffuse(in float4x4 mWorldView, 
					in float4 vPos,
					in float4x4 mWorldViewIT, 
				    in float3 vNormal,
				    in float3 vLightPosView,
				    in float3 vNegLightDirView,
				    in float4 vAttParams,
				    in float3 vSpotParams,
				    in float3 vDiffuseColour, 
				    in float3 vBaseColour, 
				    out float3 vOut)
{
	vOut = vBaseColour;		

	float3 vViewPos    = mul(mWorldView, vPos).xyz;
	float3 vLightView  = vLightPosView - vViewPos;
	float fLightD      = length(vLightView);
	vLightView		   = normalize(vLightView);
	float3 vNormalView = normalize(mul((float3x3)mWorldViewIT, vNormal));
	float nDotL        = dot(vNormalView, vLightView);
	
	if (nDotL > 0 && fLightD <= vAttParams.x)
	{
		float fAtten	= 1 / (vAttParams.y + vAttParams.z*fLightD + vAttParams.w*fLightD*fLightD);
		float rho		= dot(vNegLightDirView, vLightView);						
		float fSpotE	= saturate((rho - vSpotParams.y) / (vSpotParams.x - vSpotParams.y));
		float fSpotT	= pow(fSpotE, vSpotParams.z);	
						
		vOut += vDiffuseColour * nDotL * fAtten * fSpotT;
	}		
}

//-----------------------------------------------------------------------------
void FFP_Light_Spot_DiffuseSpecular(in float4x4 mWorldView, 
					in float4 vPos,
					in float4x4 mWorldViewIT, 
				    in float3 vNormal,
				    in float3 vLightPosView,
				    in float3 vNegLightDirView,
				    in float4 vAttParams,
				    in float3 vSpotParams,
				    in float3 vDiffuseColour, 
				    in float3 vSpecularColour, 
					in float fSpecularPower, 
				    in float3 vBaseDiffuseColour,
					in float3 vBaseSpecularColour,					
					out float3 vOutDiffuse,
					out float3 vOutSpecular)
{
	vOutDiffuse  = vBaseDiffuseColour;		
	vOutSpecular = vBaseSpecularColour;

	float3 vViewPos    = mul(mWorldView, vPos).xyz;
	float3 vLightView  = vLightPosView - vViewPos;
	float fLightD      = length(vLightView);
	vLightView		   = normalize(vLightView);
	float3 vNormalView = normalize(mul((float3x3)mWorldViewIT, vNormal));
	float nDotL        = dot(vNormalView, vLightView);
	
	
	
	if (nDotL > 0 && fLightD <= vAttParams.x)
	{
		float3 vView       = -normalize(vViewPos);	
		float3 vHalfWay    = normalize(vView + vLightView);				
		float nDotH        = dot(vNormalView, vHalfWay);
		float fAtten	= 1 / (vAttParams.y + vAttParams.z*fLightD + vAttParams.w*fLightD*fLightD);
		float rho		= dot(vNegLightDirView, vLightView);						
		float fSpotE	= saturate((rho - vSpotParams.y) / (vSpotParams.x - vSpotParams.y));
		float fSpotT	= pow(fSpotE, vSpotParams.z);	
						
		vOutDiffuse  += vDiffuseColour * nDotL * fAtten * fSpotT;
		vOutSpecular += vSpecularColour * pow(saturate(nDotH), fSpecularPower) * fAtten * fSpotT;
	}		
}