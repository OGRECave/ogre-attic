/*
-----------------------------------------------------------------------------
This source file is part of OGRE
(Object-oriented Graphics Rendering Engine)
For the latest info, see http://www.ogre3d.org

Copyright (c) 2000-2006 Torus Knot Software Ltd
Also see acknowledgements in Readme.html

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt.

You may alternatively use this source under the terms of a specific version of
the OGRE Unrestricted License provided you have obtained such a license from
Torus Knot Software Ltd.
-----------------------------------------------------------------------------
*/

//-----------------------------------------------------------------------------
// Program Name: FFPLib_Common
// Program Desc: Common functions of the FFP.
// Program Type: Vertex/Pixel shader
// Language: CG
// Notes: Common functions needed by all FFP implementation classes.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
void FFP_Assign(in float vIn, out float vOut)
{
	vOut = vIn;
}
//-----------------------------------------------------------------------------
void FFP_Assign(in float2 vIn, out float2 vOut)
{
	vOut = vIn;
}

//-----------------------------------------------------------------------------
void FFP_Assign(in float3 vIn, out float3 vOut)
{
	vOut = vIn;
}

//-----------------------------------------------------------------------------
void FFP_Assign(in float4 vIn, out float4 vOut)
{
	vOut = vIn;
}

//-----------------------------------------------------------------------------
void FFP_Construct(in float r, 
				   in float g,
				   in float b,
				   in float a,
				   out float4 vOut)
{
	vOut = float4(r,g,b,a);
}

//-----------------------------------------------------------------------------
void FFP_Modulate(in float vIn0, in float vIn1, out float vOut)
{
	vOut = vIn0 * vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Modulate(in float2 vIn0, in float2 vIn1, out float2 vOut)
{
	vOut = vIn0 * vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Modulate(in float3 vIn0, in float3 vIn1, out float3 vOut)
{
	vOut = vIn0 * vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Modulate(in float4 vIn0, in float4 vIn1, out float4 vOut)
{
	vOut = vIn0 * vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Add(in float vIn0, in float vIn1, out float vOut)
{
	vOut = vIn0 + vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Add(in float2 vIn0, in float2 vIn1, out float2 vOut)
{
	vOut = vIn0 + vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Add(in float3 vIn0, in float3 vIn1, out float3 vOut)
{
	vOut = vIn0 + vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Add(in float4 vIn0, in float4 vIn1, out float4 vOut)
{
	vOut = vIn0 + vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Subtract(in float vIn0, in float vIn1, out float vOut)
{
	vOut = vIn0 - vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Subtract(in float2 vIn0, in float2 vIn1, out float2 vOut)
{
	vOut = vIn0 - vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Subtract(in float3 vIn0, in float3 vIn1, out float3 vOut)
{
	vOut = vIn0 - vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Subtract(in float4 vIn0, in float4 vIn1, out float4 vOut)
{
	vOut = vIn0 - vIn1;
}

//-----------------------------------------------------------------------------
void FFP_Lerp(in float vIn0, in float vIn1, float T, out float vOut)
{
	vOut = lerp(vIn0, vIn1, T);
}

//-----------------------------------------------------------------------------
void FFP_Lerp(in float2 vIn0, in float2 vIn1, float T, out float2 vOut)
{
	vOut = lerp(vIn0, vIn1, T);
}

//-----------------------------------------------------------------------------
void FFP_Lerp(in float3 vIn0, in float3 vIn1, float T, out float3 vOut)
{
	vOut = lerp(vIn0, vIn1, T);
}

//-----------------------------------------------------------------------------
void FFP_Lerp(in float4 vIn0, in float4 vIn1, float T, out float4 vOut)
{
	vOut = lerp(vIn0, vIn1, T);
}

//-----------------------------------------------------------------------------
void FFP_Lerp(in float4 vIn0, in float4 vIn1, float4 T, out float4 vOut)
{
	vOut = lerp(vIn0, vIn1, T);
}

//-----------------------------------------------------------------------------
void FFP_DotProduct(in float vIn0, in float vIn1, out float vOut)
{
	vOut = dot(vIn0, vIn1);
}

//-----------------------------------------------------------------------------
void FFP_DotProduct(in float2 vIn0, in float2 vIn1, out float2 vOut)
{
	vOut = dot(vIn0, vIn1);
}

//-----------------------------------------------------------------------------
void FFP_DotProduct(in float3 vIn0, in float3 vIn1, out float3 vOut)
{
	vOut = dot(vIn0, vIn1);
}

//-----------------------------------------------------------------------------
void FFP_DotProduct(in float4 vIn0, in float4 vIn1, out float4 vOut)
{
	vOut = dot(vIn0, vIn1);
}



