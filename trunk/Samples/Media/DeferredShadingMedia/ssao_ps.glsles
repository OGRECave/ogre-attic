#version 100

precision highp float;
precision highp int;
precision lowp sampler2D;
precision lowp samplerCube;

struct VIn
{
    vec4 p   : POSITION;
    vec3 n   : NORMAL;
    vec2 uv  : TEXCOORD0;
};

struct VOut
{
    vec4 p   : POSITION;
    vec2 uv  : TEXCOORD0;
    vec3 ray : TEXCOORD1;
};

// PIn
varying vec2 uv;
varying vec3 ray;

uniform mat4 ptMat;
uniform float far;
uniform sampler2D geomMap;
uniform sampler2D randMap;

vec4 TEX2DLOD(sampler2D map, vec2 uv)
{
    return texture2D(map, uv);
}

vec4 main(
    PIn IN,
{
    #define MAX_RAND_SAMPLES 14

    const vec3 RAND_SAMPLES[MAX_RAND_SAMPLES] =
    {
        vec3(1.0, 0.0, 0.0),
        vec3(-1.0, 0.0, 0.0),
        vec3(0.0, 1.0, 0.0),
        vec3(0.0, -1.0, 0.0),
        vec3(0.0, 0.0, 1.0),
        vec3(0.0, 0.0, -1.0),
        normalize(vec3(1.0, 1.0, 1.0)),
        normalize(vec3(-1.0, 1.0, 1.0)),
        normalize(vec3(1.0, -1.0, 1.0)),
        normalize(vec3(1.0, 1.0, -1.0)),
        normalize(vec3(-1.0, -1.0, 1.0)),
        normalize(vec3(-1.0, 1.0, -1.0)),
        normalize(vec3(1.0, -1.0, -1.0)),
        normalize(vec3(-1.0, -1.0, -1.0))
    };

    // constant expressin != const int :(
    #define NUM_BASE_SAMPLES 6

    // random normal lookup from a texture and expand to [-1..1]
    vec3 randN = TEX2DLOD(randMap, IN.uv * 24.0).xyz * 2.0 - 1.0;
    vec4 geom = TEX2DLOD(geomMap, IN.uv);
    float depth = geom.w;

    // IN.ray will be distorted slightly due to interpolation
    // it should be normalized here
    vec3 viewPos = IN.ray * depth;

    // by computing Z manually, we lose some accuracy under extreme angles
    // considering this is just for bias, this loss is acceptable
    vec3 viewNorm = geom.xyz;//computeZ(geom.yz);

    // accumulated occlusion factor
    float occ = 0;
    for (int i = 0; i < NUM_BASE_SAMPLES; ++i)
    {
        // reflected direction to move in for the sphere
        // (based on random samples and a random texture sample)
        // bias the random direction away from the normal
        // this tends to minimize self occlusion
        vec3 randomDir = reflect(RAND_SAMPLES[i], randN) + viewNorm;

        // move new view-space position back into texture space
        #define RADIUS 0.2125
        vec4 nuv = ptMat * vec4(viewPos.xyz + randomDir * RADIUS, 1.0);
        nuv.xy /= nuv.w;

        // compute occlusion based on the (scaled) Z difference
        float zd = saturate(far * (depth - TEX2DLOD(geomMap, nuv.xy).w));
        // this is a sample occlusion function, you can always play with
        // other ones, like 1.0 / (1.0 + zd * zd) and stuff
        occ += saturate(pow(1.0 - zd, 11.0) + zd);
    }
    occ /= NUM_BASE_SAMPLES;

    gl_FragColor =  vec4(occ, occ, occ, 1.0);
}
