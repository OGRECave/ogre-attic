#version 100

precision highp float;
precision highp int;
precision lowp sampler2D;
precision lowp samplerCube;

struct VIn
{
    vec4 p   : POSITION;
    vec3 n   : NORMAL;
    vec2 uv  : TEXCOORD0;
};

struct VOut
{
    vec4 p   : POSITION;
    vec2 uv  : TEXCOORD0;
    vec3 ray : TEXCOORD1;
};

struct PIn
{
    vec2 uv  : TEXCOORD0;
    vec3 ray : TEXCOORD1;
};

VOut ssao_vs(VIn IN, uniform mat4 wvp, uniform vec3 farCorner)
{
    VOut OUT;
    OUT.p = mul(wvp, IN.p);
    // clean up inaccuracies for the UV coords
    vec2 uv = sign(IN.p);
    // convert to image space
    uv = (vec2(uv.x, -uv.y) + 1.0) * 0.5;
    OUT.uv = uv;
    // calculate the correct ray (modify XY parameters based on screen-space quad XY)
    OUT.ray = farCorner * vec3(sign(IN.p.xy), 1);
    return OUT;
}

vec3 computeZ(vec2 xy)
{
    return vec3(xy, sqrt(1.0 - dot(xy, xy)));
}

// for ps_3_0, we want to use tex2Dlod because it's faster
ps_3_0 vec4 TEX2DLOD(sampler2D map, vec2 uv)
{
    return tex2Dlod(map, vec4(uv.xy, 0, 0));
}

vec4 TEX2DLOD(sampler2D map, vec2 uv)
{
    return tex2D(map, uv);
}

vec4 main(vec2 uv : TEXCOORD0,
    uniform vec4 invTexSize,
    uniform sampler2D map : TEXUNIT0, uniform sampler2D geomMap : TEXUNIT1): COLOR0
{
//    return TEX2DLOD(map, uv);
    vec2 o = vec2(0, invTexSize.y);
    vec4 sum = TEX2DLOD(map, uv) * (NUM_BLUR_SAMPLES + 1);
    float denom = NUM_BLUR_SAMPLES + 1;
    vec4 geom = TEX2DLOD(geomMap, uv);
    for (int i = 1; i <= NUM_BLUR_SAMPLES; ++i)
    {
        vec2 nuv = uv + o * i;
        vec4 nGeom = TEX2DLOD(geomMap, nuv);
        float coef = (NUM_BLUR_SAMPLES + 1 - i) * (dot(geom.xyz, nGeom.xyz) > 0.9);
        sum += TEX2DLOD(map, nuv) * coef;
        denom += coef;
    }
    for (int i = 1; i <= 4; ++i)
    {
        vec2 nuv = uv + o * -i;
        vec4 nGeom = TEX2DLOD(geomMap, nuv);
        float coef = (NUM_BLUR_SAMPLES + 1 - i) * (dot(geom.xyz, nGeom.xyz) > 0.9);
        sum += TEX2DLOD(map, nuv) * coef;
        denom += coef;
    }
    return sum / denom;
}
