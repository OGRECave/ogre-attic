/////////////////////////////////////////////////////////////////////////////////
//
// shadowreceiverfp.cg
//
// Hamilton Chong
// (c) 2006
//
// This is an example fragment shader for shadow receiver objects.  
//
/////////////////////////////////////////////////////////////////////////////////


sampler2D ShadowMap : TEXUNIT0;

// Define outputs from vertex shader.
struct Vertex
{
  float4 position       : POSITION;     // fragment position in post projective space
  float4 shadowCoord    : TEXCOORD0;    // fragment position in shadow map coordinates
  float  diffuse        : TEXCOORD1;    // diffuse shading value
};

struct Fragment
{
    float4 color  : COLOR0;
};

Fragment main(Vertex        In/*, 
              uniform float uSTexWidth,
              uniform float uSTexHeight*/)
{
    Fragment Out;

    // compute the shadow coordinates for texture lookup
    // NOTE: texture_viewproj_matrix maps z into [0,1] range, not [-1,1], so
    //  have to make sure shadow caster stores depth values with same convention.
    float4 scoord = In.shadowCoord / In.shadowCoord.w;

    // ------------------------------------------------------------------------------

    // Non-PCF code (comment out above section and uncomment the following two lines)

    float zvalue = tex2D(ShadowMap, scoord.xy).x;
    float visibility = (zvalue <= scoord.z) ? 0.0 : 1.0;
    visibility = (all(abs(scoord.xy-0.5)<=0.5)) ? visibility : 1.0;
    
    // ------------------------------------------------------------------------------

    visibility *= In.diffuse;
    Out.color = float4(visibility, visibility, visibility, 0.0);
    return Out;
}
